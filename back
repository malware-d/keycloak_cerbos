<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Management System - Django + Cerbos + Keycloak</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header .subtitle {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .user-info {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .user-welcome {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .user-welcome h3 {
            color: #2c3e50;
            font-size: 1.5rem;
        }

        .logout-btn {
            background: #e74c3c;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            text-decoration: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .logout-btn:hover {
            background: #c0392b;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(231, 76, 60, 0.3);
        }

        .role-badges {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .role-badge {
            background: #3498db;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .role-badge.admin { background: #e74c3c; }
        .role-badge.manager { background: #f39c12; }
        .role-badge.user { background: #27ae60; }
        .role-badge.reviewer { background: #9b59b6; }

        .documents-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .documents-section h2 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.8rem;
            text-align: center;
        }

        .documents-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 25px;
        }

        .document-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border-left: 5px solid #3498db;
        }

        .document-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .document-card.marketing { border-left-color: #e74c3c; }
        .document-card.finance { border-left-color: #f39c12; }
        .document-card.hr { border-left-color: #27ae60; }
        .document-card.it { border-left-color: #9b59b6; }

        .document-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .document-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2c3e50;
        }

        .document-status {
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .status-pending { background: #fff3cd; color: #856404; }
        .status-approved { background: #d4edda; color: #155724; }
        .status-rejected { background: #f8d7da; color: #721c24; }
        .status-draft { background: #e2e3e5; color: #383d41; }

        .document-meta {
            color: #7f8c8d;
            font-size: 0.9rem;
            margin-bottom: 15px;
        }

        .document-meta i {
            margin-right: 5px;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .action-btn {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            padding: 8px 15px;
            border: none;
            border-radius: 25px;
            text-decoration: none;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .btn-view { background: #3498db; color: white; }
        .btn-edit { background: #f39c12; color: white; }
        .btn-delete { background: #e74c3c; color: white; }
        .btn-approve { background: #27ae60; color: white; }
        .btn-reject { background: #95a5a6; color: white; }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .test-scenarios {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .test-scenarios h3 {
            color: #2c3e50;
            margin-bottom: 20px;
            font-size: 1.5rem;
        }

        .scenario-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .scenario-card {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            border-left: 4px solid #3498db;
        }

        .scenario-card h4 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }

        .scenario-card ul {
            list-style: none;
            padding-left: 0;
        }

        .scenario-card li {
            padding: 3px 0;
            color: #555;
        }

        .scenario-card li i {
            color: #27ae60;
            margin-right: 8px;
        }

        .login-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .login-btn {
            background: #3498db;
            color: white;
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-block;
            margin-top: 20px;
        }

        .login-btn:hover {
            background: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(52, 152, 219, 0.3);
        }

        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .documents-grid {
                grid-template-columns: 1fr;
            }
            
            .user-welcome {
                flex-direction: column;
                gap: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-shield-alt"></i> Document Management System</h1>
            <p class="subtitle">Django + Cerbos + Keycloak Integration Demo</p>
        </div>

        {% if user.is_authenticated %}
            <div class="user-info">
                <div class="user-welcome">
                    <div>
                        <h3><i class="fas fa-user-circle"></i> Welcome, {{ user.username }}!</h3>
                        <p>Authenticated via Keycloak SSO</p>
                    </div>
                    <a href="{% url 'account_logout' %}" class="logout-btn">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </div>
                <div class="role-badges">
                    <!-- These would be dynamically populated from user roles -->
                    <span class="role-badge admin">Admin</span>
                    <span class="role-badge manager">Manager</span>
                    <span class="role-badge user">User</span>
                </div>
            </div>

            <div class="documents-section">
                <h2><i class="fas fa-file-alt"></i> Document Management</h2>
                <p style="text-align: center; color: #7f8c8d; margin-bottom: 25px;">
                    Test various authorization scenarios with different document types and user roles
                </p>

                <div class="documents-grid">
                    <!-- Marketing Document -->
                    <div class="document-card marketing">
                        <div class="document-header">
                            <div class="document-title">
                                <i class="fas fa-bullhorn"></i> Marketing Campaign Plan
                            </div>
                            <span class="document-status status-pending">Pending Approval</span>
                        </div>
                        <div class="document-meta">
                            <div><i class="fas fa-user"></i> Author: john_doe</div>
                            <div><i class="fas fa-building"></i> Department: Marketing</div>
                            <div><i class="fas fa-calendar"></i> Created: Today</div>
                        </div>
                        <div class="action-buttons">
                            <a href="{% url 'manage_document' 'doc_marketing_001' 'view' %}" class="action-btn btn-view">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <a href="{% url 'manage_document' 'doc_marketing_001' 'edit' %}" class="action-btn btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="{% url 'manage_document' 'doc_marketing_001' 'approve' %}" class="action-btn btn-approve">
                                <i class="fas fa-check"></i> Approve
                            </a>
                            <a href="{% url 'manage_document' 'doc_marketing_001' 'reject' %}" class="action-btn btn-reject">
                                <i class="fas fa-times"></i> Reject
                            </a>
                            <a href="{% url 'manage_document' 'doc_marketing_001' 'delete' %}" class="action-btn btn-delete">
                                <i class="fas fa-trash"></i> Delete
                            </a>
                        </div>
                    </div>

                    <!-- Finance Document -->
                    <div class="document-card finance">
                        <div class="document-header">
                            <div class="document-title">
                                <i class="fas fa-chart-line"></i> Q4 Budget Report
                            </div>
                            <span class="document-status status-approved">Approved</span>
                        </div>
                        <div class="document-meta">
                            <div><i class="fas fa-user"></i> Author: finance_user</div>
                            <div><i class="fas fa-building"></i> Department: Finance</div>
                            <div><i class="fas fa-calendar"></i> Created: Yesterday</div>
                        </div>
                        <div class="action-buttons">
                            <a href="{% url 'manage_document' 'doc_finance_001' 'view' %}" class="action-btn btn-view">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <a href="{% url 'manage_document' 'doc_finance_001' 'edit' %}" class="action-btn btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="{% url 'manage_document' 'doc_finance_001' 'delete' %}" class="action-btn btn-delete">
                                <i class="fas fa-trash"></i> Delete
                            </a>
                        </div>
                    </div>

                    <!-- HR Document -->
                    <div class="document-card hr">
                        <div class="document-header">
                            <div class="document-title">
                                <i class="fas fa-users"></i> Employee Handbook
                            </div>
                            <span class="document-status status-draft">Draft</span>
                        </div>
                        <div class="document-meta">
                            <div><i class="fas fa-user"></i> Author: {{ user.username }}</div>
                            <div><i class="fas fa-building"></i> Department: HR</div>
                            <div><i class="fas fa-calendar"></i> Created: 2 days ago</div>
                        </div>
                        <div class="action-buttons">
                            <a href="{% url 'manage_document' 'doc_hr_001' 'view' %}" class="action-btn btn-view">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <a href="{% url 'manage_document' 'doc_hr_001' 'edit' %}" class="action-btn btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="{% url 'manage_document' 'doc_hr_001' 'approve' %}" class="action-btn btn-approve">
                                <i class="fas fa-check"></i> Approve
                            </a>
                            <a href="{% url 'manage_document' 'doc_hr_001' 'delete' %}" class="action-btn btn-delete">
                                <i class="fas fa-trash"></i> Delete
                            </a>
                        </div>
                    </div>

                    <!-- IT Document -->
                    <div class="document-card it">
                        <div class="document-header">
                            <div class="document-title">
                                <i class="fas fa-server"></i> Security Policy
                            </div>
                            <span class="document-status status-rejected">Rejected</span>
                        </div>
                        <div class="document-meta">
                            <div><i class="fas fa-user"></i> Author: it_admin</div>
                            <div><i class="fas fa-building"></i> Department: IT</div>
                            <div><i class="fas fa-calendar"></i> Created: 1 week ago</div>
                        </div>
                        <div class="action-buttons">
                            <a href="{% url 'manage_document' 'doc_it_001' 'view' %}" class="action-btn btn-view">
                                <i class="fas fa-eye"></i> View
                            </a>
                            <a href="{% url 'manage_document' 'doc_it_001' 'edit' %}" class="action-btn btn-edit">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                            <a href="{% url 'manage_document' 'doc_it_001' 'delete' %}" class="action-btn btn-delete">
                                <i class="fas fa-trash"></i> Delete
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="test-scenarios">
                <h3><i class="fas fa-flask"></i> Authorization Test Scenarios</h3>
                <div class="scenario-grid">
                    <div class="scenario-card">
                        <h4>Admin Role</h4>
                        <ul>
                            <li><i class="fas fa-check"></i> All actions on any document</li>
                            <li><i class="fas fa-check"></i> Cross-department access</li>
                            <li><i class="fas fa-check"></i> System-wide permissions</li>
                        </ul>
                    </div>

                    <div class="scenario-card">
                        <h4>Manager Role</h4>
                        <ul>
                            <li><i class="fas fa-check"></i> View, edit, approve documents</li>
                            <li><i class="fas fa-check"></i> Department-specific access</li>
                            <li><i class="fas fa-times"></i> Cannot delete system docs</li>
                        </ul>
                    </div>

                    <div class="scenario-card">
                        <h4>User Role</h4>
                        <ul>
                            <li><i class="fas fa-check"></i> View/edit own documents</li>
                            <li><i class="fas fa-times"></i> Cannot approve documents</li>
                            <li><i class="fas fa-times"></i> Limited department access</li>
                        </ul>
                    </div>

                    <div class="scenario-card">
                        <h4>John Doe Principal</h4>
                        <ul>
                            <li><i class="fas fa-check"></i> Approve Marketing docs</li>
                            <li><i class="fas fa-check"></i> Only pending_approval status</li>
                            <li><i class="fas fa-times"></i> No other department access</li>
                        </ul>
                    </div>
                </div>
            </div>

        {% else %}
            <div class="login-section">
                <h2><i class="fas fa-lock"></i> Authentication Required</h2>
                <p>Please login through Keycloak to access the Document Management System</p>
                <a href="{% url 'account_login' %}" class="login-btn">
                <!-- <a href="/accounts/oidc/keycloak/login/" class="login-btn"></a> -->
                    <i class="fas fa-sign-in-alt"></i> Login with Keycloak
                </a>
            </div>
        {% endif %}
    </div>
</body>
</html>




<!-- <!DOCTYPE html>
<html>
<head>
    <title>Django Cerbos Keycloak Integration</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 800px; margin: 0 auto; }
        .action-buttons { margin: 20px 0; }
        .action-buttons a { 
            display: inline-block; 
            margin: 5px; 
            padding: 10px 15px; 
            background: #007cba; 
            color: white; 
            text-decoration: none; 
            border-radius: 5px; 
        }
        .user-info { 
            background: #f0f0f0; 
            padding: 15px; 
            border-radius: 5px; 
            margin-bottom: 20px; 
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Django Cerbos Keycloak Integration Demo</h1>
        
        {% if user.is_authenticated %}
            <div class="user-info">
                <h3>Welcome, {{ user.username }}!</h3>
                <p>You are successfully authenticated via Keycloak.</p>
                <a href="{% url 'account_logout' %}">Logout</a>
            </div>
            
            <h2>Document Management Actions</h2>
            <p>Try different actions on Document ID: <strong>doc123</strong></p>
            
            <div class="action-buttons">
                <a href="{% url 'manage_document' 'doc123' 'view' %}">View Document</a>
                <a href="{% url 'manage_document' 'doc123' 'edit' %}">Edit Document</a>
                <a href="{% url 'manage_document' 'doc123' 'delete' %}">Delete Document</a>
                <a href="{% url 'manage_document' 'doc123' 'approve' %}">Approve Document</a>
            </div>
            
            <h3>How to test:</h3>
            <ul>
                <li><strong>Admin role:</strong> Can perform all actions</li>
                <li><strong>User role:</strong> Can only view/edit own documents</li>
                <li><strong>Manager role:</strong> Can view, edit, and approve documents</li>
                <li><strong>john_doe principal:</strong> Can approve Marketing dept documents with pending_approval status</li>
            </ul>
        {% else %}
            <p>Please <a href="{% url 'account_login' %}">login</a> to access the application.</p>
        {% endif %}
    </div>
</body>
</html> -->





#!/usr/bin/env python3
"""
Cerbos Log Monitor Tool
Monitors Cerbos logs and extracts authorization decisions to send to Django web app
"""

import json
import requests
import time
import subprocess
import threading
from datetime import datetime
from typing import Dict, List, Optional
import logging
import sys

# Cấu hình
DJANGO_API_ENDPOINT = "http://localhost:8000/api/cerbos-logs/"  # Thay đổi URL của Django app
DOCKER_CONTAINER_NAME = "cerbos"
LOG_CHECK_INTERVAL = 0.5  # Kiểm tra log mỗi 0.5 giây

# Cấu hình logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CerbosLogMonitor:
    def __init__(self, django_endpoint: str, container_name: str):
        self.django_endpoint = django_endpoint
        self.container_name = container_name
        self.running = False
        self.last_log_time = None
        
    def extract_decision_info(self, log_entry: Dict) -> Optional[Dict]:
        """
        Trích xuất thông tin quyết định từ log entry
        """
        try:
            if log_entry.get("log.logger") != "cerbos.audit" or log_entry.get("log.kind") != "decision":
                return None
                
            check_resources = log_entry.get("checkResources", {})
            inputs = check_resources.get("inputs", [])
            outputs = check_resources.get("outputs", [])
            effective_policies = log_entry.get("auditTrail", {}).get("effectivePolicies", {})
            policy_source_info = log_entry.get("policySource", {})
            
            decisions = []
            
            for i, input_data in enumerate(inputs):
                resource = input_data.get("resource", {})
                principal = input_data.get("principal", {})
                actions = input_data.get("actions", [])
                
                # Tìm output tương ứng
                output = None
                if i < len(outputs):
                    output = outputs[i]
                
                if output:
                    for action in actions:
                        action_result = output.get("actions", {}).get(action, {})
                        effect = action_result.get("effect", "")
                        policy = action_result.get("policy", "")
                        
                        # Lấy thông tin policy từ effective policies
                        policy_details = effective_policies.get(policy, {})
                        policy_file_source = policy_details.get("attributes", {}).get("source", "")
                        
                        # Tạo policy_source theo format yêu cầu
                        disk_directory = policy_source_info.get("disk", {}).get("directory", "/policies")
                        policy_source = f"disk:{disk_directory}/{policy_file_source}" if policy_file_source else f"disk:{disk_directory}"
                        
                        decision = {
                            "timestamp": log_entry.get("timestamp"),
                            "call_id": log_entry.get("callId"),
                            "resource": {
                                "id": resource.get("id"),
                                "kind": resource.get("kind"),
                                "attributes": resource.get("attr", {})
                            },
                            "principal": {
                                "id": principal.get("id"),
                                "roles": principal.get("roles", []),
                                "attributes": principal.get("attr", {})
                            },
                            "action": action,
                            "effect": self.format_effect(effect),
                            "policy_used": policy,
                            "policy_source": policy_source,
                            "is_allowed": effect == "EFFECT_ALLOW"
                        }
                        decisions.append(decision)
            
            return {
                "timestamp": datetime.now().isoformat(),
                "decisions": decisions,
                "total_decisions": len(decisions)
            } if decisions else None
            
        except Exception as e:
            logger.error(f"Error extracting decision info: {e}")
            return None
    
    def format_effect(self, effect: str) -> str:
        """Format effect để dễ đọc hơn"""
        effect_map = {
            "EFFECT_ALLOW": "ALLOWED",
            "EFFECT_DENY": "DENIED",
            "EFFECT_UNSPECIFIED": "UNSPECIFIED"
        }
        return effect_map.get(effect, effect)
    
    def send_to_django(self, decision_data: Dict) -> bool:
        """
        Gửi dữ liệu decision đến Django web app
        """
        try:
            response = requests.post(
                self.django_endpoint,
                json=decision_data,
                headers={"Content-Type": "application/json"},
                timeout=5
            )
            
            if response.status_code == 200:
                logger.info(f"Successfully sent decision data to Django")
                return True
            else:
                logger.error(f"Failed to send to Django: {response.status_code} - {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error sending to Django: {e}")
            return False
    
    def get_docker_logs(self):
        """
        Lấy logs từ Docker container - chỉ log mới từ khi bắt đầu tool
        """
        try:
            # Sử dụng --tail 0 để chỉ lấy log mới từ thời điểm hiện tại
            cmd = [
                "docker", "logs", "-f", "--tail", "0", self.container_name
            ]
            
            # logger.info(f"Starting docker logs command: {' '.join(cmd)}")
            
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,  # Chuyển stderr về stdout để xử lý chung
                universal_newlines=True,
                bufsize=1
            )
            
            return process
            
        except Exception as e:
            logger.error(f"Error starting docker logs: {e}")
            return None
    
    def process_log_line(self, line: str):
        """
        Xử lý từng dòng log mới
        """
        try:
            # Bỏ qua dòng trống
            line = line.strip()
            if not line:
                return
            
            # Kiểm tra xem có phải JSON không
            if not line.startswith("{"):
                return
            
            # Parse JSON
            log_entry = json.loads(line)
            
            # Chỉ xử lý decision logs
            if (log_entry.get("log.logger") == "cerbos.audit" and 
                log_entry.get("log.kind") == "decision"):
                
                # Trích xuất thông tin decision
                decision_info = self.extract_decision_info(log_entry)
                
                if decision_info:
                    # In ra JSON để debug
                    print(json.dumps(decision_info, ensure_ascii=False))
                    
                    # Gửi đến Django API
                    success = self.send_to_django(decision_info)
                    if not success:
                        logger.warning(f"Failed to send decision data to Django")
                
        except json.JSONDecodeError:
            pass
        except Exception as e:
            pass
    
    def monitor_logs(self):
        """
        Theo dõi logs chính - chỉ xử lý log mới
        """
        print(f"🚀 Starting to monitor NEW logs from container: {self.container_name}")
        print("📌 Only processing logs that appear AFTER tool startup...")
        
        while self.running:
            try:
                # Lấy logs từ Docker (chỉ log mới)
                process = self.get_docker_logs()
                
                if not process:
                    print("❌ Failed to start docker logs process")
                    time.sleep(5)
                    continue
                
                print("✅ Connected to docker logs stream, waiting for new logs...")
                
                # Đọc logs theo thời gian thực
                while self.running and process.poll() is None:
                    line = process.stdout.readline()
                    if line:
                        self.process_log_line(line)
                
                # Nếu process kết thúc, thử kết nối lại
                if process.poll() is not None:
                    print("🔄 Docker logs process ended, reconnecting...")
                    time.sleep(2)
                
            except KeyboardInterrupt:
                print("⏹️ Received keyboard interrupt")
                break
            except Exception as e:
                print(f"❌ Error in monitor loop: {e}")
                time.sleep(5)
                continue
            finally:
                # Cleanup process nếu tồn tại
                if 'process' in locals() and process and process.poll() is None:
                    process.terminate()
    
    def start_monitoring(self):
        """
        Bắt đầu monitoring - chỉ log mới từ thời điểm này
        """
        self.running = True
        print("=" * 60)
        print("🎯 CERBOS LOG MONITOR STARTED")
        print("=" * 60)
        print("📋 Configuration:")
        print(f"   • Django endpoint: {self.django_endpoint}")
        print(f"   • Container name: {self.container_name}")
        print("   • Mode: NEW LOGS ONLY (from now on)")
        print("=" * 60)
        
        try:
            self.monitor_logs()
        except KeyboardInterrupt:
            print("⏹️ Monitoring stopped by user")
        finally:
            self.running = False
            print("🛑 Cerbos Log Monitor stopped")
    
    def stop_monitoring(self):
        """
        Dừng monitoring
        """
        self.running = False

def main():
    """
    Main function
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Cerbos Log Monitor Tool - Monitor NEW logs only")
    parser.add_argument(
        "--django-endpoint", 
        default=DJANGO_API_ENDPOINT,
        help="Django API endpoint để gửi dữ liệu"
    )
    parser.add_argument(
        "--container-name",
        default=DOCKER_CONTAINER_NAME,
        help="Tên Docker container của Cerbos"
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Bật debug logging"
    )
    
    args = parser.parse_args()
    
    # Cấu hình log level
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("🔍 Debug mode enabled")
    
    # Tạo monitor instance
    monitor = CerbosLogMonitor(
        django_endpoint=args.django_endpoint,
        container_name=args.container_name
    )
    
    # Bắt đầu monitoring
    try:
        monitor.start_monitoring()
    except KeyboardInterrupt:
        print("\n⏹️ Stopping monitor...")
        monitor.stop_monitoring()

if __name__ == "__main__":
    main()