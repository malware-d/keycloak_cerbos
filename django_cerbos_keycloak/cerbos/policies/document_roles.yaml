apiVersion: api.cerbos.dev/v1
derivedRoles:
  name: document_roles
  definitions:
    
    # ========================================
    # OWNERSHIP-BASED ROLES
    # ========================================
    
    document_owner:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          expr: request.resource.attr.author == request.principal.id

    document_collaborator:
      parentRoles: ["user", "manager"]
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.author == request.principal.id
              - expr: request.resource.attr.department == request.principal.attr.department

    # ========================================
    # DEPARTMENT-BASED ROLES
    # ========================================
    
    same_department_user:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          expr: request.resource.attr.department == request.principal.attr.department

    cross_department_manager:
      parentRoles: ["manager"]
      condition:
        match:
          expr: request.principal.attr.seniority_level == "executive"

    department_head:
      parentRoles: ["manager"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.department == request.principal.attr.department
              - expr: request.principal.attr.seniority_level in ["senior", "executive"]

    # ========================================
    # WORKFLOW-BASED ROLES  
    # ========================================
    
    document_approver:
      parentRoles: ["manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status in ["pending_approval", "pending_review"]
              - expr: request.resource.attr.author != request.principal.id

    workflow_manager:
      parentRoles: ["manager", "reviewer"]
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.status == "pending_approval"
              - expr: request.resource.attr.status == "pending_review"
              - expr: request.resource.attr.status == "draft"

    final_approver:
      parentRoles: ["manager"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.project_budget > 25000
              - expr: request.principal.attr.seniority_level == "executive"

    # ========================================
    # SECURITY AND CLASSIFICATION ROLES
    # ========================================
    
    confidential_access:
      parentRoles: ["manager", "admin", "security_officer"]
      condition:
        match:
          any:
            of:
              - expr: request.principal.attr.project_access_level == "all_projects"
              - expr: request.resource.attr.author == request.principal.id
              - expr: '"admin" in request.principal.roles'

    restricted_access:
      parentRoles: ["admin", "security_officer"]
      condition:
        match:
          expr: request.principal.attr.project_access_level == "all_projects"

    public_document_viewer:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "public"
              - expr: request.resource.attr.status == "approved"

    internal_document_viewer:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "internal"
              - expr: request.resource.attr.department == request.principal.attr.department

    # ========================================
    # FINANCIAL AND BUDGET ROLES
    # ========================================
    
    budget_approver_small:
      parentRoles: ["manager", "reviewer"]
      condition:
        match:
          expr: request.resource.attr.project_budget <= 10000

    budget_approver_medium:
      parentRoles: ["manager"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.project_budget <= 50000
              - expr: request.principal.attr.seniority_level in ["senior", "executive"]

    budget_approver_large:
      parentRoles: ["manager", "admin"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.project_budget <= 500000
              - expr: request.principal.attr.seniority_level == "executive"

    financial_controller:
      parentRoles: ["finance_specialist", "manager"]
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.is_financial == true
              - expr: request.resource.attr.department == "Finance"

    # ========================================
    # CONTENT TYPE SPECIFIC ROLES
    # ========================================
    
    security_policy_manager:
      parentRoles: ["it_admin", "security_officer", "admin"]
      condition:
        match:
          expr: request.resource.attr.content_type == "security_policy"

    brand_manager:
      parentRoles: ["manager", "user"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.content_type == "brand_document"
              - expr: request.resource.attr.department == "Marketing"

    hr_policy_manager:
      parentRoles: ["manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.content_type == "policy_document"
              - expr: request.resource.attr.department == "HR"

    financial_analyst:
      parentRoles: ["finance_specialist", "reviewer"]
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.content_type == "financial_report"
              - expr: request.resource.attr.content_type == "expense_report"

    # ========================================
    # TIME AND STATUS BASED ROLES
    # ========================================
    
    draft_editor:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status == "draft"
              - expr: request.resource.attr.author == request.principal.id

    pending_reviewer:
      parentRoles: ["reviewer", "manager"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status in ["pending_approval", "pending_review"]
              - expr: request.resource.attr.author != request.principal.id

    rejected_document_editor:
      parentRoles: ["user"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status == "rejected"
              - expr: request.resource.attr.author == request.principal.id

    # ========================================
    # SPECIAL PERMISSION ROLES
    # ========================================
    
    emergency_access:
      parentRoles: ["admin", "security_officer"]
      condition:
        match:
          expr: request.principal.attr.project_access_level == "all_projects"

    audit_access:
      parentRoles: ["security_officer", "admin"]
      condition:
        match:
          expr: '"security_officer" in request.principal.roles || "admin" in request.principal.roles'

    cleanup_manager:
      parentRoles: ["manager", "admin"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status == "draft"
              - expr: request.resource.attr.department == request.principal.attr.department
              - expr: request.resource.attr.classification != "confidential"

    # ========================================
    # PROJECT-BASED ROLES
    # ========================================
    
    project_stakeholder:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          any:
            of:
              - expr: request.principal.attr.project_access_level == "all_projects"
              - expr: request.principal.attr.project_access_level == "department_projects"

    external_collaborator:
      parentRoles: ["user"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "public"
              - expr: request.principal.attr.department == "External"
              - expr: request.resource.attr.status == "approved"

    # ========================================
    # COMPOSITE ROLES (Multiple Conditions)
    # ========================================
    
    senior_department_manager:
      parentRoles: ["manager"]
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.department == request.principal.attr.department
              - expr: request.principal.attr.seniority_level in ["senior", "executive"]
              - expr: request.principal.attr.project_access_level != "assigned_projects"

    trusted_user:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          all:
            of:
              - expr: request.principal.attr.seniority_level != "junior"
              - expr: request.principal.attr.project_access_level != "assigned_projects"
              - expr: request.principal.attr.department != "External"

# ========================================
# EXPORT DEFINITIONS
# ========================================
exports:
  - document_owner
  - document_approver
  - same_department_user
  - confidential_access
  - budget_approver_small
  - budget_approver_medium  
  - budget_approver_large
  - security_policy_manager
  - financial_controller
  - senior_department_manager