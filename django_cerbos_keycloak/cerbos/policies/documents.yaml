apiVersion: api.cerbos.dev/v1
resourcePolicy:
  version: default
  resource: document
  
  importDerivedRoles:
    - document_roles

  rules:
    # ========================================
    # ADMIN RULES - Full system access
    # ========================================
    - actions: ['view', 'edit', 'delete', 'approve', 'reject']
      effect: EFFECT_ALLOW
      roles: ['admin']
      name: admin_full_access

    # ========================================
    # MANAGER RULES - Department-based management
    # ========================================
    
    # Managers can perform most actions within their department
    - actions: ['view', 'edit', 'approve', 'reject']
      effect: EFFECT_ALLOW
      roles: ['manager']
      condition:
        match:
          expr: >
            request.resource.attr.department == request.principal.attr.department ||
            request.principal.attr.seniority_level == "executive"
      name: manager_department_access

    # Managers can delete non-confidential documents in their department
    - actions: ['delete']
      effect: EFFECT_ALLOW
      roles: ['manager']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.department == request.principal.attr.department
              - expr: request.resource.attr.classification != "confidential"
      name: manager_delete_non_confidential

    # ========================================
    # REVIEWER RULES - Review and approval workflow
    # ========================================
    
    # Reviewers can view and approve documents in pending status
    - actions: ['view', 'approve', 'reject']
      effect: EFFECT_ALLOW
      roles: ['reviewer']
      condition:
        match:
          any:
            of:
              - expr: request.resource.attr.status == "pending_approval"
              - expr: request.resource.attr.status == "pending_review"
      name: reviewer_approval_workflow

    # Reviewers can edit documents they are reviewing
    - actions: ['edit']
      effect: EFFECT_ALLOW
      roles: ['reviewer']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status in ["pending_approval", "pending_review"]
              - expr: request.resource.attr.classification in ["internal", "public"]
      name: reviewer_edit_pending

    # ========================================
    # USER RULES - Basic user permissions
    # ========================================
    
    # Users can view and edit their own documents
    - actions: ['view', 'edit']
      effect: EFFECT_ALLOW
      roles: ['user']
      condition:
        match:
          expr: request.resource.attr.author == request.principal.id
      name: user_own_documents

    # Users can view public and internal documents in their department
    - actions: ['view']
      effect: EFFECT_ALLOW  
      roles: ['user']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.department == request.principal.attr.department
              - expr: request.resource.attr.classification in ["public", "internal"]
      name: user_view_department_docs

    # Users can view approved public documents from any department
    - actions: ['view']
      effect: EFFECT_ALLOW
      roles: ['user']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "public"
              - expr: request.resource.attr.status == "approved"
      name: user_view_public_approved

    # ========================================
    # FINANCIAL CONTROLS - Budget-based restrictions
    # ========================================
    
    # High-value document restrictions (>$50,000)
    - actions: ['approve']
      effect: EFFECT_DENY
      roles: ['manager', 'reviewer']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.project_budget > 50000
              - expr: request.principal.attr.seniority_level != "executive"
      name: high_value_approval_restriction

    # Financial document special rules
    - actions: ['view', 'edit']
      effect: EFFECT_ALLOW
      roles: ['finance_specialist']
      condition:
        match:
          expr: request.resource.attr.is_financial == true
      name: finance_specialist_access

    # ========================================
    # SECURITY AND COMPLIANCE RULES
    # ========================================
    
    # Confidential document restrictions
    - actions: ['view']
      effect: EFFECT_DENY
      roles: ['user']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "confidential"
              - expr: request.resource.attr.author != request.principal.id
      name: confidential_access_restriction

    # Restricted documents require special clearance
    - actions: ['view', 'edit']
      effect: EFFECT_DENY
      roles: ['user', 'reviewer']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.classification == "restricted"
              - expr: request.principal.attr.project_access_level != "all_projects"
      name: restricted_document_access

    # Security policy documents - IT department only
    - actions: ['view', 'edit', 'approve']
      effect: EFFECT_ALLOW
      roles: ['it_admin', 'security_officer']
      condition:
        match:
          expr: request.resource.attr.content_type == "security_policy"
      name: security_policy_access

    # ========================================
    # WORKFLOW STATE RULES
    # ========================================
    
    # Cannot edit approved documents (except admins)
    - actions: ['edit']
      effect: EFFECT_DENY
      roles: ['user', 'manager', 'reviewer']
      condition:
        match:
          expr: request.resource.attr.status == "approved"
      name: no_edit_approved_docs

    # Cannot approve your own documents
    - actions: ['approve']
      effect: EFFECT_DENY
      roles: ['manager', 'reviewer']
      condition:
        match:
          expr: request.resource.attr.author == request.principal.id
      name: no_self_approval

    # Rejected documents can only be edited by original author
    - actions: ['edit']
      effect: EFFECT_DENY
      roles: ['manager', 'reviewer']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status == "rejected"
              - expr: request.resource.attr.author != request.principal.id
      name: rejected_author_only_edit

    # ========================================
    # TIME-BASED AND CONDITIONAL RULES
    # ========================================
    
    # Draft documents older than 30 days can be deleted by managers
    - actions: ['delete']
      effect: EFFECT_ALLOW
      roles: ['manager']
      condition:
        match:
          all:
            of:
              - expr: request.resource.attr.status == "draft"
              - expr: request.resource.attr.department == request.principal.attr.department
              # Note: In real implementation, you'd compare dates
              - expr: request.resource.attr.classification != "confidential"
      name: cleanup_old_drafts

  # ========================================
  # DERIVED ROLES SECTION
  # ========================================
  
  derivedRoles:
    document_owner:
      parentRoles: ["user"]
      condition:
        match:
          expr: request.resource.attr.author == request.principal.id

    department_manager:
      parentRoles: ["manager"] 
      condition:
        match:
          expr: request.resource.attr.department == request.principal.attr.department

    document_reviewer:
      parentRoles: ["reviewer"]
      condition:
        match:
          expr: request.resource.attr.status in ["pending_approval", "pending_review"]

    high_clearance_user:
      parentRoles: ["user", "manager", "reviewer"]
      condition:
        match:
          expr: request.principal.attr.project_access_level == "all_projects"

# Variables that can be used in conditions
variables:
  import:
    - aip.api.cerbos.dev/v1/cerbos.time
  local:
    current_year: "2025"
    max_budget_user_approve: "10000"
    max_budget_manager_approve: "100000"

# apiVersion: api.cerbos.dev/v1
# resourcePolicy:
#   version: default
#   resource: document

#   rules:
#     # Admins can view, edit, and delete any document.
#     - actions: ['view', 'edit', 'delete']
#       effect: EFFECT_ALLOW
#       roles: ['admin']

#     # Users can view and edit their own documents.
#     - actions: ['view', 'edit']
#       effect: EFFECT_ALLOW
#       roles: ['user']
#       condition:
#         match:
#           expr: request.resource.attr.author == request.principal.id

#     # Managers can view, edit and approve documents.
#     - actions: ['view', 'edit', 'approve']
#       effect: EFFECT_ALLOW
#       roles: ['manager']